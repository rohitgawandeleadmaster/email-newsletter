import React, { useEffect, useMemo, useState } from "react";
import { Link, useNavigate } from "react-router-dom";

// LocalStorage keys
const LS_KEY = "newsletter_templates_v1";

// Helpers to persist templates on the client
function loadTemplates() {
  try {
    const raw = localStorage.getItem(LS_KEY);
    const parsed = raw ? JSON.parse(raw) : [];
    return Array.isArray(parsed) ? parsed : [];
  } catch {
    return [];
  }
}

function saveTemplates(list) {
  try {
    localStorage.setItem(LS_KEY, JSON.stringify(list));
  } catch {
    // ignore quota errors
  }
}

function genId() {
  // simple client-only id
  return (
    "tpl_" + Math.random().toString(36).slice(2, 10) + Date.now().toString(36)
  );
}

export default function TemplateGallerySaved() {
  const navigate = useNavigate();
  const [templates, setTemplates] = useState([]);
  const [q, setQ] = useState("");
  const [deletingId, setDeletingId] = useState(null);

  useEffect(() => {
    const list = loadTemplates();
    // sort by updatedAt desc if present
    list.sort(
      (a, b) => new Date(b.updatedAt || 0) - new Date(a.updatedAt || 0)
    );
    setTemplates(list);
  }, []);

  const filtered = useMemo(() => {
    const term = q.trim().toLowerCase();
    if (!term) return templates;
    return templates.filter(
      (t) =>
        (t.name || "").toLowerCase().includes(term) ||
        (t.updatedAt || "").toLowerCase().includes(term)
    );
  }, [q, templates]);

  const handleDelete = (id) => {
    if (!window.confirm("Delete this template?")) return;
    setDeletingId(id);
    setTemplates((prev) => {
      const next = prev.filter((t) => t.id !== id);
      saveTemplates(next);
      return next;
    });
    setDeletingId(null);
  };

  const handleDuplicate = (tpl) => {
    const copy = {
      ...tpl,
      id: genId(),
      name: `${tpl.name || "Template"} (Copy)`,
      updatedAt: new Date().toISOString(),
    };
    setTemplates((prev) => {
      const next = [copy, ...prev];
      saveTemplates(next);
      return next;
    });
  };

  const handleSend = (tpl) => {
    // Navigate to editor; editor will exportToEmailHtml + send
    navigate("/", { state: { template: tpl, action: "send" } });
  };

  const handleEdit = (tpl) => {
    // Open in editor and rehydrate
    navigate("/", { state: { template: tpl, action: "edit" } });
  };

  // Optional: create a quick sample to get started
  const createSample = () => {
    const sample = {
      id: genId(),
      name: "Sample Newsletter",
      elements: [
        { id: "h1", type: "heading", text: "Hello World", align: "center" },
        {
          id: "p1",
          type: "paragraph",
          text: "Your first client-only saved template.",
        },
        {
          id: "btn1",
          type: "button",
          text: "Learn More",
          link: "https://example.com",
        },
      ],
      globalSettings: {
        maxWidth: 640,
        bgColor: "#ffffff",
        fontFamily: "Arial, sans-serif",
      },
      thumbnailUrl: "", // could be generated by the editor and stored here
      updatedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
    };
    setTemplates((prev) => {
      const next = [sample, ...prev];
      saveTemplates(next);
      return next;
    });
  };

  return (
    <div className="px-6 py-6 max-w-6xl mx-auto">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-semibold text-gray-800">
          Saved Templates
        </h1>
        <div className="flex gap-2">
          <button
            onClick={createSample}
            className="px-4 py-2 rounded-lg bg-emerald-600 text-white hover:bg-emerald-700"
          >
            Add Sample
          </button>
          <Link
            to="/"
            className="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700"
          >
            New / Editor
          </Link>
        </div>
      </div>

      <div className="mb-5">
        <input
          type="text"
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="Search by name or date..."
          className="w-full md:w-96 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-200"
        />
      </div>

      {filtered.length === 0 && (
        <div className="text-gray-600">
          No templates yet. Use Add Sample or save from the editor.
        </div>
      )}

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5">
        {filtered.map((t) => (
          <div
            key={t.id}
            className="bg-white rounded-xl border shadow-sm hover:shadow-md transition"
          >
            <div className="aspect-[4/3] bg-gray-100 rounded-t-xl overflow-hidden">
              {t.thumbnailUrl ? (
                <img
                  src={t.thumbnailUrl}
                  alt={t.name}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-gray-400">
                  No thumbnail
                </div>
              )}
            </div>

            <div className="p-4">
              <div className="flex items-start justify-between gap-3">
                <div>
                  <div className="text-base font-semibold text-gray-900">
                    {t.name || "Untitled"}
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    {t.updatedAt ? new Date(t.updatedAt).toLocaleString() : ""}
                  </div>
                </div>
              </div>

              <div className="mt-4 flex gap-2">
                <button
                  onClick={() => handleEdit(t)}
                  className="px-3 py-1.5 text-sm rounded-md bg-gray-800 text-white hover:bg-black"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleSend(t)}
                  className="px-3 py-1.5 text-sm rounded-md bg-blue-600 text-white hover:bg-blue-700"
                >
                  Send
                </button>
                <button
                  onClick={() => handleDuplicate(t)}
                  className="px-3 py-1.5 text-sm rounded-md bg-amber-500 text-white hover:bg-amber-600"
                >
                  Duplicate
                </button>
                <button
                  onClick={() => handleDelete(t.id)}
                  disabled={deletingId === t.id}
                  className="px-3 py-1.5 text-sm rounded-md bg-red-600 text-white hover:bg-red-700 disabled:opacity-50"
                >
                  {deletingId === t.id ? "Deleting..." : "Delete"}
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
